package springSpiel;

public class Feld {
	private Punkt[][] field;
	private int turn = 0;
	private int pieces;

	Feld() {
		pieces = 0;
		field = new Punkt[7][7];
		for (int i = 0; i < field.length; i++) {
			for (int j = 0; j < field.length; j++) {
				if ((i < 2 || i > 4) && (j < 2 || j > 4)) {
					field[i][j] = null;
					// System.out.print("0");
				} else {
					pieces++;
					if (i == 3 && j == 3) {
						field[i][j] = new Punkt(i, j, false);
					} else {
						field[i][j] = new Punkt(i, j);
					} // System.out.print("X");
				}
			}
			System.out.println();
		}
	}

	void printField() {
		System.out.println("Zug Nr." + turn + ".");
		System.out.println((pieces - 1) + " Steine m\u00fcssen noch entfernt werden.");
		System.out.println("-----------------------------");
		for (int i = 0; i < field.length; i++) {
			for (int j = 0; j < field.length; j++) {
				if ((i < 2 || i > 4) && (j < 2 || j > 4)) {
					System.out.print("|   ");
				} else {
					if (field[i][j].getBlocked()) {
						System.out.print("| O ");
					} else {
						System.out.print("|   ");
					}
				}
			}
			System.out.print("|");
			System.out.println();
			System.out.println("-----------------------------");
		}
	}

	boolean jump(int x, int y, Richtung direction) {

		switch (direction) {
		case LINKS:
			
			if(isFree(x,y-1) == false && isFree(x,y-2)){
				
			}
			else{
				return false;
			}
			break;
		case RECHTS:
			break;
		case HOCH:
			break;
		case RUNTER:
			break;
		}
		return false;
	}

	boolean isFree(int x, int y) {
		if ((x < 2 || x > 4) && (y < 2 || y > 4)) {
			return false;
		}
		if (field[x][y].getBlocked() == false) {
			return true;
		}
		return false;
	}

}
